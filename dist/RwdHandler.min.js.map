{"version":3,"sources":["RwdHandler.js"],"names":["root","factory","define","amd","exports","_typeof","module","require","window","RwdHandler","undefined","options","_classCallCheck","this","doneBehavior","config","minWidth","maxWidth","behavior","rollback","_createClass","key","value","Error","_checkConfig","arguments","length","TypeError","winWidth","innerWidth","inGivenWidth","_this","_doRwdBehavior","addEventListener","_this2","removeEventListener","_setConfig"],"mappings":"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","file":"RwdHandler.min.js","sourcesContent":["/*!\r\n * RwdHandler - v1.0.0 2017-01-07\r\n * https://github.com/hsiao19/RwdHandler\r\n * \r\n * Copyright (c) 2017 Yu-Tung, Hsiao\r\n * Licensed MIT <https://github.com/hsiao19/RwdHandler/blob/master/LICENSE>\r\n */\r\n\r\n/**\r\n * Rwd handler module.\r\n * Execute given behavior under specific width, and execute rollback function \r\n * when the screen width not in the specific width.\r\n * @module RwdHandler\r\n */\r\n\r\n(function(root, factory) {\r\n    if( typeof define === 'function' && define.amd ) {\r\n        define(factory);\r\n    }\r\n    else if(typeof exports === 'object') {\r\n        module.exports = factory(require, exports, module);\r\n    }\r\n    else if( root ) {\r\n        root.RwdHandler = factory();\r\n    }\r\n    else {\r\n        window.RwdHandler = factory();\r\n    }\r\n}(this, (require, exports, module) => {\r\n\r\n    /** \r\n     * Class for rwd behavior.\r\n     * Set behavior under given screen width.\r\n     * Note: If rollback function is given and an event listener is added in \r\n     * behavior, the event should call off() in rollback function. \r\n     * e.g. $(element).off('event'), or call off() before bind the event in \r\n     * behavior. \r\n     * e.g. $(element).off('event').on('event', fn).\r\n     */\r\n    class RwdHandler {\r\n        \r\n        /**\r\n         * Create a rwd behavior handler.\r\n         * @param {object} options - RwdHandler options.\r\n         * @param {number} [options.minWidth=null] - Minimum width of screen.\r\n         * @param {number} [options.maxWidth=null] - Maximum width of screen.\r\n         * @param {function} options.behavior - A function going to execute \r\n         *                                      under given screen width.\r\n         * @param {function} [options.rollback-null] - A function for returning \r\n         *                                             behavior to previous \r\n         *                                             state.\r\n         */\r\n        constructor(options) {\r\n            this.doneBehavior = false;\r\n            this.config = {\r\n                minWidth: null,\r\n                maxWidth: null,\r\n                behavior: null,\r\n                rollback: null\r\n            }\r\n\r\n            // set handler config\r\n            this._setConfig(options);        \r\n        }\r\n\r\n        /**\r\n         * Set rwd handler config value.\r\n         * @param {object} options - RwdHandler options.\r\n         * @param {number} [options.minWidth=this.config.minWidth]\r\n         *                  - Minimum width of screen.\r\n         * @param {number} [options.maxWidth=this.config.maxWidth]\r\n         *                  - Maximum width of screen.\r\n         * @param {function} [options.behavior=this.config.behavior]\r\n         *                    - A function going to execute under given screen \r\n         *                      width.\r\n         * @param {function} [options.rollback=this.config.rollback]\r\n         *                    - A function for returning behavior to previous \r\n         *                      state.\r\n         */\r\n        _setConfig(options) {\r\n            // check options type\r\n            if(!options || typeof options !== 'object') {\r\n                throw new Error('options is invalid');\r\n            }\r\n\r\n            // set handler config\r\n            if(options.minWidth){\r\n                this.config.minWidth = options.minWidth;\r\n            }\r\n            if(options.maxWidth){\r\n                this.config.maxWidth = options.maxWidth;\r\n            }\r\n            if(options.behavior){\r\n                this.config.behavior = options.behavior;\r\n            }\r\n            if(options.rollback){\r\n                this.config.rollback = options.rollback;\r\n            }\r\n\r\n            this._checkConfig();\r\n        }\r\n\r\n        /**\r\n         * Check whether the rwd handler config value is correct.\r\n         * @param {object} config - RwdHandler options.\r\n         * @param {number} [config.minWidth=this.config.minWidth]\r\n         *                  - Minimum width of screen.\r\n         * @param {number} [config.maxWidth=this.config.maxWidth]\r\n         *                  - Maximum width of screen.\r\n         * @param {function} [config.behavior=this.config.behavior]\r\n         *                    - A function going to execute under given screen \r\n         *                      width.\r\n         * @param {function} [config.rollback=this.config.rollback]\r\n         *                    - A function for returning behavior to previous \r\n         *                      state.\r\n         */\r\n        _checkConfig(config=this.config) {\r\n            // width check\r\n            if(!config.minWidth && !config.maxWidth) {\r\n                throw new Error('minWidth or maxWidth should be given');\r\n            }\r\n\r\n            if(config.minWidth && typeof config.minWidth !== \"number\") {\r\n                throw new TypeError('minWidth should be a number');\r\n            }\r\n\r\n            if(config.maxWidth && typeof config.maxWidth !== \"number\") {\r\n                throw new TypeError('maxWidth should be a number');\r\n            }\r\n\r\n            // behavior and rollback check\r\n            if(!config.behavior) {\r\n                throw new Error('behavior should be given');\r\n            }\r\n\r\n            if(config.behavior && typeof config.behavior !== \"function\") {\r\n                throw new TypeError('behavior should be a function');\r\n            }\r\n\r\n            if(config.rollback && typeof config.rollback !== \"function\") {\r\n                throw new TypeError('rollback should be a function');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Execute rwd behavior under specific width, and execute rollback \r\n         * function when the screen width not in the specific width.\r\n         */\r\n        _doRwdBehavior() {\r\n            let winWidth = window.innerWidth;\r\n            let inGivenWidth = false;\r\n\r\n            if (this.config.maxWidth && this.config.minWidth) {\r\n                if (winWidth <= this.config.maxWidth && winWidth > this.config.minWidth){\r\n                    inGivenWidth = true;\r\n                }\r\n            }\r\n            else if (this.config.maxWidth && !this.config.minWidth) {\r\n                if (winWidth <= this.config.maxWidth){\r\n                    inGivenWidth = true;\r\n                }\r\n            }\r\n            else if (!this.config.maxWidth && this.config.minWidth) {\r\n                if (winWidth > this.config.minWidth) {\r\n                    inGivenWidth = true;\r\n                }\r\n            }\r\n            \r\n            if(inGivenWidth) {\r\n                if (this.config.rollback && this.doneBehavior) {\r\n                    this.config.rollback();\r\n                    this.doneBehavior = false;\r\n                }\r\n                this.config.behavior();\r\n                this.doneBehavior = true;           \r\n            }\r\n            else {\r\n                if (this.doneBehavior) {\r\n                    if (this.config.rollback) {\r\n                        this.config.rollback();\r\n                        this.doneBehavior = false;\r\n                    } \r\n                }                      \r\n            }\r\n        }\r\n\r\n        /**\r\n         * Execute rwd behavior under specific width, and execute rollback \r\n         * function when the screen width not in the specific width.\r\n         */\r\n        execute() {\r\n            this._doRwdBehavior();\r\n\r\n            window.addEventListener(\"resize\", () => {\r\n                this._doRwdBehavior();\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Stop executing rwd behavior.\r\n         */\r\n        stopExecute() {\r\n            if (this.doneBehavior){\r\n                if (this.config.rollback){\r\n                    this.config.rollback();\r\n                    this.doneBehavior = false;\r\n                } \r\n            }\r\n            window.removeEventListener(\"resize\", () => {\r\n                this._doRwdBehavior();\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Change rwd detect width.\r\n         * @param {number} [minWidth=this.config.minWidth]\r\n         *                  - Minimum width of screen.\r\n         * @param {number} [maxWidth=this.config.maxWidth]\r\n         *                  - Maximum width of screen.\r\n         */\r\n        changeDetectWidth(minWidth, maxWidth) {\r\n            if(minWidth) {\r\n                this.config.minWidth = minWidth;\r\n            }\r\n            if(maxWidth) {\r\n                this.config.maxWidth = maxWidth;\r\n            }            \r\n            this._checkConfig();\r\n        }\r\n\r\n        /**\r\n         * Change rwd behavior.\r\n         * @param {function} behavior - rwd behavior.\r\n         */\r\n        changeBehavior(behavior) {\r\n            this.config.behavior = behavior;\r\n            this._checkConfig();\r\n        }\r\n\r\n        /**\r\n         * Change rwd rollback function.\r\n         * @param {function} rollback - rollback function.\r\n         */\r\n        changeRollback(rollback) {\r\n            this.config.rollback = rollback;\r\n            this._checkConfig();\r\n        }\r\n\r\n        /**\r\n         * Change all handler config.\r\n         * @param {object} options - RwdHandler options.\r\n         * @param {number} [options.minWidth=this.config.minWidth]\r\n         *                  - Minimum width of screen.\r\n         * @param {number} [options.maxWidth=this.config.maxWidth]\r\n         *                  - Maximum width of screen.\r\n         * @param {function} [options.behavior=this.config.behavior]\r\n         *                    - A function going to execute under given screen \r\n         *                      width.\r\n         * @param {function} [options.rollback=this.config.rollback]\r\n         *                    - A function for returning behavior to previous \r\n         *                      state.\r\n         */\r\n        changeConfig(options) {\r\n            this._setConfig(options);\r\n        }\r\n    }\r\n\r\n    return RwdHandler;\r\n}));\r\n"]}